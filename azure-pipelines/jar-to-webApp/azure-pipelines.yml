# Maven package Java project Web App to Linux on Azure
# Build your Java project and deploy it to Azure as a Linux web app
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/java

trigger:
- master

variables:

  # Azure Resource Manager connection created during pipeline creation
  AZURE_SUBSCRIPTION: '15199966-ddeb-4f5e-8809-22a696b62159'

  # Web app name
  WEBAPP_NAME: 'proybaseangmvn'

  # Environment name
  ENVIRONMENT_NAME: 'proybaseangmvn'

  # Agent VM image name
  VM_IMAGE_NAME: 'ubuntu-latest'

  # Node version
  NODE_VERSION: 16.17.0

stages:
- stage: Test
  displayName: Test stage
  jobs:
  - job: MavenPackageAndTest
    displayName: Maven Package and Test
    pool:
      vmImage: $(VM_IMAGE_NAME)

    steps:
    #----------------------------------------------------------------------
    # Install all tools and check configuration
    #----------------------------------------------------------------------
    - task: NodeTool@0
      inputs:
        versionSpec: $(NODE_VERSION)
      displayName: 'TOOLS: install Node.js'
    - task: Bash@3
      inputs:
        targetType: 'inline'
        script: |
          wget -q https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
          sudo apt install ./google-chrome-stable_current_amd64.deb
      displayName: 'TOOLS: install Chrome'
    #----------------------------------------------------------------------
    # Tests
    #----------------------------------------------------------------------
    - task: Npm@1
      inputs:
        command: 'install'
      displayName: 'INSTALL: launch npm install'
    - script: chmod +x mvnw
    - task: Npm@1
      inputs:
        command: 'custom'
        customCommand: ' run ci:backend:test'
      displayName: 'TESTS: backend'
    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '**/TEST-*.xml'
        searchFolder: '$(Build.SourcesDirectory)/target/test-results'
      condition: succeededOrFailed()
      displayName: 'TESTS: publish test results'
    - task: Npm@1
      inputs:
        command: 'custom'
        customCommand: ' run ci:frontend:test'
      displayName: 'TESTS: frontend'
    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '$(Build.SourcesDirectory)/target/test-results/TESTS-results-jest.xml'
      condition: succeededOrFailed()
      displayName: 'TESTS: publish test results'
    - task: Npm@1
      inputs:
        command: 'custom'
        customCommand: ' run java:jar:prod'
      displayName: 'TESTS: packaging'
    - task: Npm@1
      inputs:
        command: 'custom'
        customCommand: ' run ci:e2e:package'
      displayName: 'E2E: Package'
    - task: Npm@1
      inputs:
        command: 'custom'
        customCommand: ' run ci:e2e:prepare'
      displayName: 'E2E: Prepare'
    - task: Npm@1
      inputs:
        command: 'custom'
        customCommand: ' run ci:e2e:run'
      displayName: 'E2E: Run'
      env:
        CYPRESS_ENABLE_RECORD: false
    - task: PublishPipelineArtifact@1
      inputs:
        artifactName: 'cypress-screenshots'
        targetPath: '$(Build.SourcesDirectory)/target/cypress/screenshots'
      condition: failed()
      displayName: 'E2E: Publish Cypress Screenshots'
    - task: Npm@1
      inputs:
        command: 'custom'
        customCommand: ' run ci:e2e:teardown'
      displayName: 'E2E: Teardown'

- stage: Build
  displayName: Build stage
  jobs:
  - job: MavenPackageAndPublishArtifacts
    displayName: Maven Package and Publish Artifacts
    pool:
      vmImage: $(VM_IMAGE_NAME)

    steps:
    - task: Npm@1
      inputs:
        command: 'custom'
        customCommand: ' run java:jar:prod'
      displayName: 'TESTS: packaging'

    - task: CopyFiles@2
      displayName: 'Copy Files to artifact staging directory'
      inputs:
        SourceFolder: '$(System.DefaultWorkingDirectory)'
        Contents: '**/target/proy*.jar'
        TargetFolder: $(Build.ArtifactStagingDirectory)

    - upload: $(Build.ArtifactStagingDirectory)
      artifact: drop

- stage: Deploy
  displayName: Deploy stage
  dependsOn: Build
  condition: succeeded()
  jobs:
  - deployment: DeployLinuxWebApp
    displayName: Deploy Linux Web App
    environment: $(ENVIRONMENT_NAME)
    pool:
      vmImage: $(VM_IMAGE_NAME)
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebApp@1
            displayName: 'Azure Web App Deploy: $(WEBAPP_NAME)'
            inputs:
              azureSubscription: $(AZURE_SUBSCRIPTION)
              appType: webAppLinux
              appName: $(WEBAPP_NAME)
              package: '$(Pipeline.Workspace)/drop/**/target/*.?(war|jar)'
