# Maven package Java project Web App to Linux on Azure
# Build your Java project and deploy it to Azure as a Linux web app
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/java

trigger:
  - master

variables:
  # Azure Resource Manager connection created during pipeline creation
  AZURE_SUBSCRIPTION_SERVICE_CONNECTION: '32fce50a-f821-43ef-8cc9-b18e8a630550'

  # Web app name
  WEBAPP_NAME: 'proybaseangmvn3con'

  # Environment name
  ENVIRONMENT_NAME: 'proybaseangmvn'

  # Agent VM image name
  VM_IMAGE_NAME: 'ubuntu-latest'

  # Container Registry 
  CONTAINER_REGISTRY: proybaseangmvn.azurecr.io

  # Container Registry name
  CONTAINER_REGISTRY_NAME: proybaseangmvn3

  # Image name in the repository
  IMAGE_REPOSITORY: proybaseangmvn3

  # Tag for image version
  TAG: '$(Build.BuildId)'

  # Node version
  NODE_VERSION: 16.17.0

stages:
  - stage: Test
    displayName: Test stage
    jobs:
      - job: MavenPackage
        displayName: Maven Package and Test
        pool:
          vmImage: $(VM_IMAGE_NAME)

        steps:
          #----------------------------------------------------------------------
          # Install all tools and check configuration
          #----------------------------------------------------------------------
          - task: NodeTool@0
            inputs:
              versionSpec: $(NODE_VERSION)
            displayName: 'TOOLS: install Node.js'
          - task: Bash@3
            inputs:
              targetType: 'inline'
              script: |
                wget -q https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
                sudo apt install ./google-chrome-stable_current_amd64.deb
            displayName: 'TOOLS: install Chrome'
          - task: JavaToolInstaller@0
            inputs:
              versionSpec: '17'
              jdkArchitectureOption: 'x64'
              jdkSourceOption: 'PreInstalled'
            displayName: 'Change Java version'

          #----------------------------------------------------------------------
          # Tests
          #----------------------------------------------------------------------
          - task: Bash@3
            inputs:
              targetType: 'inline'
              script: 'java -version'
            displayName: 'Verificar versi√≥n de Java'
          - task: Npm@1
            inputs:
              command: 'install'
            displayName: 'INSTALL: launch npm install'
          - script: chmod +x mvnw
          - task: Npm@1
            inputs:
              command: 'custom'
              customCommand: ' run ci:backend:test'
            displayName: 'TESTS: backend'
          - task: PublishTestResults@2
            inputs:
              testResultsFormat: 'JUnit'
              testResultsFiles: '**/TEST-*.xml'
              searchFolder: '$(Build.SourcesDirectory)/target/test-results'
            condition: succeededOrFailed()
            displayName: 'TESTS: publish test results'
          - task: Npm@1
            inputs:
              command: 'custom'
              customCommand: ' run ci:frontend:test'
            displayName: 'TESTS: frontend'
          - task: PublishTestResults@2
            inputs:
              testResultsFormat: 'JUnit'
              testResultsFiles: '$(Build.SourcesDirectory)/target/test-results/TESTS-results-jest.xml'
            condition: succeededOrFailed()
            displayName: 'TESTS: publish test results'
          - task: Npm@1
            inputs:
              command: 'custom'
              customCommand: ' run java:jar:prod'
            displayName: 'TESTS: packaging'
          - task: Npm@1
            inputs:
              command: 'custom'
              customCommand: ' run ci:e2e:package'
            displayName: 'E2E: Package'
          - task: Npm@1
            inputs:
              command: 'custom'
              customCommand: ' run ci:e2e:prepare'
            displayName: 'E2E: Prepare'
          - task: Npm@1
            inputs:
              command: 'custom'
              customCommand: ' run ci:e2e:run'
            displayName: 'E2E: Run'
            env:
              CYPRESS_ENABLE_RECORD: false
          - task: PublishPipelineArtifact@1
            inputs:
              artifactName: 'cypress-screenshots'
              targetPath: '$(Build.SourcesDirectory)/target/cypress/screenshots'
            condition: failed()
            displayName: 'E2E: Publish Cypress Screenshots'
          - task: Npm@1
            inputs:
              command: 'custom'
              customCommand: ' run ci:e2e:teardown'
            displayName: 'E2E: Teardown'

  - stage: Build
    displayName: Build and package
    jobs:
      - job: Build
        displayName: Build
        pool:
          vmImage: $(VM_IMAGE_NAME)
        steps:
          - task: JavaToolInstaller@0
            inputs:
              versionSpec: '17'
              jdkArchitectureOption: 'x64'
              jdkSourceOption: 'PreInstalled'
            displayName: 'Change Java version'
          - task: Docker@2
            displayName: Login to Azure Container Registry
            inputs:
              command: login
              containerRegistry: $(CONTAINER_REGISTRY)
          - script: './mvnw package -Pprod verify jib:build -Djib.to.image=$(CONTAINER_REGISTRY)/$(IMAGE_REPOSITORY):$(TAG)'
            displayName: 'Build and package the application'

  - stage: Deploy
    displayName: Deploy stage
    dependsOn: Build
    condition: succeeded()
    jobs:
      - job: Deploy
        displayName: Deploy
        pool:
          vmImage: $(VM_IMAGE_NAME)
        steps:
          - task: AzureWebAppContainer@1
            displayName: 'Azure Web App on Container Deploy'
            inputs:
              azureSubscription: $(AZURE_SUBSCRIPTION_SERVICE_CONNECTION)
              appName: $(WEBAPP_NAME)
              imageName: $(CONTAINER_REGISTRY)/$(IMAGE_REPOSITORY):$(TAG)
