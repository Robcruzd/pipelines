# Deploy to Azure Kubernetes Service
# Build and push image to Azure Container Registry; Deploy to Azure Kubernetes Service
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
  - master

resources:
  - repo: self

variables:
  # Container registry service connection established during pipeline creation
  DOCKER_REGISTRY_SERVICE_CONNECTION: 'd4048e56-abe7-41ab-baab-47d9846a4fdc'

  # Image name in the repository
  IMAGE_REPOSITORY: proybaseangmvn3

  # Container Registry 
  CONTAINER_REGISTRY: proybaseangmvn3.azurecr.io

  # Container Registry name
  CONTAINER_REGISTRY_NAME: proybaseangmvn3

  # Tag for image version
  TAG: '$(Build.BuildId)'

  # Image pull secret
  IMAGE_PULL_SECRET: 'proybaseangmvn31037a0e4-auth'

  # Agent VM image name
  VM_IMAGE_NAME: 'ubuntu-latest'

  # Name of the new namespace being created to deploy the PR changes.
  k8sNamespaceForPR: 'review-app-$(System.PullRequest.PullRequestId)'

stages:
  - stage: Test
    displayName: Test stage
    jobs:
      - job: MavenPackage
        displayName: Maven Package and Test
        pool:
          vmImage: $(VM_IMAGE_NAME)

        steps:
          #----------------------------------------------------------------------
          # Install all tools and check configuration
          #----------------------------------------------------------------------
          - task: NodeTool@0
            inputs:
              versionSpec: $(NODE_VERSION)
            displayName: 'TOOLS: install Node.js'
          - task: Bash@3
            inputs:
              targetType: 'inline'
              script: |
                wget -q https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
                sudo apt install ./google-chrome-stable_current_amd64.deb
            displayName: 'TOOLS: install Chrome'
          - task: JavaToolInstaller@0
            inputs:
              versionSpec: '17'
              jdkArchitectureOption: 'x64'
              jdkSourceOption: 'PreInstalled'
            displayName: 'Change Java version'

          #----------------------------------------------------------------------
          # Tests
          #----------------------------------------------------------------------
          - task: Bash@3
            inputs:
              targetType: 'inline'
              script: 'java -version'
            displayName: 'Verificar versi√≥n de Java'
          - task: Npm@1
            inputs:
              command: 'install'
            displayName: 'INSTALL: launch npm install'
          - script: chmod +x mvnw
          - task: Npm@1
            inputs:
              command: 'custom'
              customCommand: ' run ci:backend:test'
            displayName: 'TESTS: backend'
          - task: PublishTestResults@2
            inputs:
              testResultsFormat: 'JUnit'
              testResultsFiles: '**/TEST-*.xml'
              searchFolder: '$(Build.SourcesDirectory)/target/test-results'
            condition: succeededOrFailed()
            displayName: 'TESTS: publish test results'
          - task: Npm@1
            inputs:
              command: 'custom'
              customCommand: ' run ci:frontend:test'
            displayName: 'TESTS: frontend'
          - task: PublishTestResults@2
            inputs:
              testResultsFormat: 'JUnit'
              testResultsFiles: '$(Build.SourcesDirectory)/target/test-results/TESTS-results-jest.xml'
            condition: succeededOrFailed()
            displayName: 'TESTS: publish test results'
          - task: Npm@1
            inputs:
              command: 'custom'
              customCommand: ' run java:jar:prod'
            displayName: 'TESTS: packaging'
          - task: Npm@1
            inputs:
              command: 'custom'
              customCommand: ' run ci:e2e:package'
            displayName: 'E2E: Package'
          - task: Npm@1
            inputs:
              command: 'custom'
              customCommand: ' run ci:e2e:prepare'
            displayName: 'E2E: Prepare'
          - task: Npm@1
            inputs:
              command: 'custom'
              customCommand: ' run ci:e2e:run'
            displayName: 'E2E: Run'
            env:
              CYPRESS_ENABLE_RECORD: false
          - task: PublishPipelineArtifact@1
            inputs:
              artifactName: 'cypress-screenshots'
              targetPath: '$(Build.SourcesDirectory)/target/cypress/screenshots'
            condition: failed()
            displayName: 'E2E: Publish Cypress Screenshots'
          - task: Npm@1
            inputs:
              command: 'custom'
              customCommand: ' run ci:e2e:teardown'
            displayName: 'E2E: Teardown'

  - stage: Build
    displayName: Build and package
    jobs:
      - job: Build
        displayName: Build
        pool:
          vmImage: $(VM_IMAGE_NAME)
        steps:
          - task: JavaToolInstaller@0
            inputs:
              versionSpec: '17'
              jdkArchitectureOption: 'x64'
              jdkSourceOption: 'PreInstalled'
            displayName: 'Change Java version'
          - task: Docker@2
            displayName: Login to Azure Container Registry
            inputs:
              command: login
              containerRegistry: $(CONTAINER_REGISTRY_NAME)
          - script: './mvnw package -Pprod verify jib:build -Djib.to.image=$(CONTAINER_REGISTRY)/$(IMAGE_REPOSITORY):$(TAG)'
            displayName: 'Build and package the application'

          - upload: manifests
            artifact: manifests

  - stage: Deploy
    displayName: Deploy stage
    dependsOn: Build

    jobs:
      - deployment: Deploy
        condition: and(succeeded(), not(startsWith(variables['Build.SourceBranch'], 'refs/pull/')))
        displayName: Deploy
        pool:
          vmImage: $(VM_IMAGE_NAME)
        environment: 'Robcruzdproybaseangmvn3-1383.default'
        strategy:
          runOnce:
            deploy:
              steps:
                - task: KubernetesManifest@0
                  displayName: Create imagePullSecret
                  inputs:
                    action: createSecret
                    secretName: $(IMAGE_PULL_SECRET)
                    dockerRegistryEndpoint: $(DOCKER_REGISTRY_SERVICE_CONNECTION)

                - task: KubernetesManifest@0
                  displayName: Deploy to Kubernetes cluster
                  inputs:
                    action: deploy
                    manifests: |
                      $(Pipeline.Workspace)/manifests/deployment.yml
                      $(Pipeline.Workspace)/manifests/service.yml
                    imagePullSecrets: |
                      $(IMAGE_PULL_SECRET)
                    containers: |
                      $(CONTAINER_REGISTRY)/$(IMAGE_REPOSITORY):$(TAG)

      - deployment: DeployPullRequest
        displayName: Deploy Pull request
        condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/pull/'))
        pool:
          vmImage: $(VM_IMAGE_NAME)

        environment: 'Robcruzdproybaseangmvn3-1383.$(k8sNamespaceForPR)'
        strategy:
          runOnce:
            deploy:
              steps:
                - reviewApp: default

                - task: Kubernetes@1
                  displayName: 'Create a new namespace for the pull request'
                  inputs:
                    command: apply
                    useConfigurationFile: true
                    inline: '{ "kind": "Namespace", "apiVersion": "v1", "metadata": { "name": "$(k8sNamespaceForPR)" }}'

                - task: KubernetesManifest@0
                  displayName: Create imagePullSecret
                  inputs:
                    action: createSecret
                    secretName: $(IMAGE_PULL_SECRET)
                    namespace: $(k8sNamespaceForPR)
                    dockerRegistryEndpoint: $(DOCKER_REGISTRY_SERVICE_CONNECTION)

                - task: KubernetesManifest@0
                  displayName: Deploy to the new namespace in the Kubernetes cluster
                  inputs:
                    action: deploy
                    namespace: $(k8sNamespaceForPR)
                    manifests: |
                      $(Pipeline.Workspace)/manifests/deployment.yml
                      $(Pipeline.Workspace)/manifests/service.yml
                    imagePullSecrets: |
                      $(IMAGE_PULL_SECRET)
                    containers: |
                      $(CONTAINER_REGISTRY)/$(IMAGE_REPOSITORY):$(TAG)

                - task: Kubernetes@1
                  name: get
                  displayName: 'Get services in the new namespace'
                  continueOnError: true
                  inputs:
                    command: get
                    namespace: $(k8sNamespaceForPR)
                    arguments: svc
                    outputFormat: jsonpath='http://{.items[0].status.loadBalancer.ingress[0].ip}:{.items[0].spec.ports[0].port}'

                # Getting the IP of the deployed service and writing it to a variable for posing comment
                - script: |
                    url="$(get.KubectlOutput)"
                    message="Your review app has been deployed"
                    if [ ! -z "$url" -a "$url" != "http://:" ]
                    then
                      message="${message} and is available at $url.<br><br>[Learn More](https://aka.ms/testwithreviewapps) about how to test and provide feedback for the app."
                    fi
                    echo "##vso[task.setvariable variable=GITHUB_COMMENT]$message"
